/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbcsample;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author rashad
 */
public class NewJFrame extends javax.swing.JFrame{
    /**
     * Creates new form NewJFrame
     */
 int test=0;   
Random rand = new Random();

int number = rand.nextInt(99999) + 10000;
    private String us;
    private int admin;
    Date d1 = new Date();
    
     public void MainUI(String us, int admin) throws SQLException {
        this.us = us;
        this.admin = admin;
        
        System.out.println(d1);
        
        initComponents();
        System.out.println(us);
        System.out.println(admin);
        
        if(admin != 1)
        {
            Add.setVisible(false);
            Update.setVisible(false);
            Delete.setVisible(false);
            adminB.setVisible(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        fname = new javax.swing.JTextField();
        lname = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        skills = new javax.swing.JTextField();
        phonenumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Add = new javax.swing.JButton();
        search = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jsearch = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        adminB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("First Name");

        jLabel2.setText("Last Name");

        jLabel3.setText("Email");

        jLabel4.setText("Employee Id");

        jLabel5.setText("Skills");

        jLabel6.setText("Phone#");

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        fname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnameActionPerformed(evt);
            }
        });

        skills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skillsActionPerformed(evt);
            }
        });

        phonenumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phonenumberActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "EmployeeID", "First Name", "Last Name", "Phone#", "Email", "Skills"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        search.setText("Display");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        jsearch.setText("Search");
        jsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jsearchActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        adminB.setText("Admin Log");
        adminB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel4))
                                        .addGap(26, 26, 26))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(63, 63, 63)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(63, 63, 63)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(51, 51, 51)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(skills)
                            .addComponent(email)
                            .addComponent(lname)
                            .addComponent(fname)
                            .addComponent(id)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(phonenumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Delete))
                            .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(adminB, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(search)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jsearch))
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(4, 4, 4)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(skills, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(phonenumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search)
                    .addComponent(jsearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add)
                    .addComponent(Delete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Update)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminB)
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void fnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnameActionPerformed

    private void skillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skillsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_skillsActionPerformed

    private void phonenumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phonenumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phonenumberActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed

        
        insert(us, d1);
    
        
        
    }//GEN-LAST:event_AddActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
       showTableData();
    }//GEN-LAST:event_searchActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
     
   
       delete(us, d1);
      
   
       
    }//GEN-LAST:event_DeleteActionPerformed

    private void jsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jsearchActionPerformed
       jsearch();
    }//GEN-LAST:event_jsearchActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
         update(us, d1);
    }//GEN-LAST:event_UpdateActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // get the model from the jtable
       DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

        // get the selected row index
       int selectedRowIndex = jTable1.getSelectedRow();
       
        // set the selected row data into jtextfields
       id.setText(model.getValueAt(selectedRowIndex, test).toString());
       fname.setText(model.getValueAt(selectedRowIndex, test+1).toString());
       lname.setText(model.getValueAt(selectedRowIndex, test+2).toString());
       phonenumber.setText(model.getValueAt(selectedRowIndex, 3).toString());
       email.setText(model.getValueAt(selectedRowIndex, test+4).toString());
       skills.setText(model.getValueAt(selectedRowIndex, test+5).toString());
      

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clear();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void adminBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminBActionPerformed
        // TODO add your handling code here:
        showAdminData();
    }//GEN-LAST:event_adminBActionPerformed
   
     public void removecolumn(){
                    jTable1.removeColumn(jTable1.getColumnModel().getColumn(0));

    }
    public void insert(String us, Object date) {
        String user=us;
        String change="Inserted";
        String reason="";
        
        
        try {
            Connection connection = Db.getconnection();
        
         PreparedStatement stm=connection.prepareStatement("INSERT INTO  employee"+"(EmployeID,first_name, last_name, phone, email, skills)"+" VALUES (?,?,?,?,?,?)");
    
        if(id.getText().isEmpty() || !id.getText().matches("\\d+")){
            number++;
            String num=String.valueOf(number);
           stm.setString(1, num);
           reason=num+" ";

        }
        else{
        stm.setString(1, id.getText());
            reason=reason+id.getText()+" ";

        }
        
        
        if(fname.getText().isEmpty() || !fname.getText().matches("^[a-zA-Z\\s]*$")){
            stm.setString(2, "TBA");
            
        }
        else{
        stm.setString(2,fname.getText());
        reason=reason+fname.getText()+" ";
        }
        
        
        if(lname.getText().isEmpty() || !lname.getText().matches("^[a-zA-Z\\s]*$")){
            stm.setString(3, "TBA");
        }
        else{
        stm.setString(3,lname.getText());
        reason=reason+lname.getText()+" ";

        }
        
        
        if(phonenumber.getText().isEmpty() || !phonenumber.getText().matches("\\d{10}|(?:\\d{3}-){2}\\d{4}|\\(\\d{3}\\)\\d{3}-?\\d{4}")){
            stm.setString(4, "TBA");
        }
        else{
        stm.setString(4,phonenumber.getText());
        reason=reason+phonenumber.getText()+" ";

        }
        
        
        if(email.getText().isEmpty() || !email.getText().matches("^([\\w-\\.]+){1,64}@([\\w&&[^_]]+){2,255}.[a-z]{2,}$")){
            stm.setString(5, "TBA");
        }
        else{
        stm.setString(5,email.getText());
        reason=reason+email.getText()+" ";

        }
        
       
        if(skills.getText().isEmpty() || !skills.getText().matches("^(.*\\s+.*)+$")){
            stm.setString(6, "Each Skill Must End With Space");
        }
        else{
        stm.setString(6,skills.getText());
        reason=reason+skills.getText()+" ";

        }
       

        stm.executeUpdate();
        showTableData();
        clear();
        trackchange(user,change,reason,date);
        
        }
        
             catch (SQLException ex) {
                 
                     }
                     
      
    }
    
     public void clear()

    {

        email.setText(null);

        skills.setText(null);

        phonenumber.setText(null);

        id.setText(null);

        lname.setText(null);

        fname.setText(null);

       

    }
     public void delete(String us, Object date){
         int dataToDelete=jTable1.getSelectedRow();
         String user = us;
         String infoFromColumn=jTable1.getModel().getValueAt(dataToDelete,test).toString();
         String change = "Delete";
         String reason ="Id "+infoFromColumn;
      try 
        {
          Connection connection = Db.getconnection();
          PreparedStatement ps = connection.prepareStatement("DELETE FROM `employee` WHERE EmployeID = "+ infoFromColumn);        
          ps.execute();
          trackchange(user, change, reason, date);
            
            
                  
        } catch (SQLException ex) {
           
          JOptionPane.showMessageDialog(null,ex);
        }
        
         
    
     
     showTableData();
     
     }
    
     public void update(String us, Object date){
            
        int dataToUpdate=jTable1.getSelectedRow();
         String infoFromColumn=jTable1.getModel().getValueAt(dataToUpdate,test).toString();
         
         String user=us;
         String change="Updated";
         String reason="Id "+infoFromColumn;
         
     
      try 
        {
          Connection connection = Db.getconnection();
          PreparedStatement ps = connection.prepareStatement("UPDATE employee SET EmployeID=?, first_name=?, last_name=?, phone=?, email=?,skills=? WHERE EmployeID="+infoFromColumn);
          if(id.getText().isEmpty() || !id.getText().matches("\\d+")){
         
          int column=jTable1.getSelectedRow();
         String id=jTable1.getModel().getValueAt(column,test).toString();
           ps.setString(1, id);

        }
        else{
        ps.setString(1, id.getText());
        
        int cc=jTable1.getSelectedRow();
        String text=jTable1.getModel().getValueAt(cc,test).toString();
        reason=reason+" to "+text;
        
        }
        
        
        if(fname.getText().isEmpty() || !fname.getText().matches("^[a-zA-Z\\s]*$")){
          int column=jTable1.getSelectedRow();
         String firstname=jTable1.getModel().getValueAt(column,test+1).toString();
           ps.setString(2, firstname);
        }
        else{
        ps.setString(2,fname.getText());
        int cc=jTable1.getSelectedRow();
        String text=jTable1.getModel().getValueAt(cc,test+1).toString();
        reason=reason+" First Name "+text+" to "+fname.getText();
        }
        
        
        if(lname.getText().isEmpty() || !lname.getText().matches("^[a-zA-Z\\s]*$")){
        int column=jTable1.getSelectedRow();
        String lastname=jTable1.getModel().getValueAt(column,test+2).toString();
        ps.setString(test+3, lastname);
        }
        else{
        ps.setString(3,lname.getText());
        
        int cc=jTable1.getSelectedRow();
        String text=jTable1.getModel().getValueAt(cc,test+2).toString();
        reason=reason+" Last Name "+text+" to "+lname.getText();

        }
        
        
        if(phonenumber.getText().isEmpty() || !phonenumber.getText().matches("\\d{10}|(?:\\d{3}-){2}\\d{4}|\\(\\d{3}\\)\\d{3}-?\\d{4}")){
        int column=jTable1.getSelectedRow();
        String phone=jTable1.getModel().getValueAt(column,test+3).toString();
        ps.setString(4, phone);
        }
        else{
        ps.setString(4,phonenumber.getText());
        
        int cc=jTable1.getSelectedRow();
        String text=jTable1.getModel().getValueAt(cc,test+3).toString();
        reason=reason+" #"+text+" to "+phonenumber.getText();

        }
        
        
        if(email.getText().isEmpty() || !email.getText().matches("^([\\w-\\.]+){1,64}@([\\w&&[^_]]+){2,255}.[a-z]{2,}$")){
        int column=jTable1.getSelectedRow();
        String email=jTable1.getModel().getValueAt(column,test+4).toString();
        ps.setString(5, email);
        }
        else{
        ps.setString(5,email.getText());
        
        int cc=jTable1.getSelectedRow();
        String text=jTable1.getModel().getValueAt(cc,test+4).toString();
        reason=reason+" email"+text+" to "+email.getText();

        }
        
       
        if(skills.getText().isEmpty()){
        int column=jTable1.getSelectedRow();
        String skillset=jTable1.getModel().getValueAt(column,test+5).toString();
        ps.setString(6, skillset);
        }
        else{
        ps.setString(6,skills.getText());
        
        int cc=jTable1.getSelectedRow();
        String text=jTable1.getModel().getValueAt(cc,test+5).toString();
        reason=reason+" Skill"+text+" to "+skills.getText();

        }
       






         ps.execute();
         clear();
         trackchange(user,change,reason,date);  
            
            
                  
        } catch (SQLException ex) {
           
          JOptionPane.showMessageDialog(null,ex);
        }
              showTableData();

     }
     
     public   void showTableData(){
        test=0;
        jTable1.setDefaultEditor(Object.class, null);
        jTable1.setRowHeight(30);

        jTable1.setGridColor(Color.GRAY);
        jTable1.setFont(new Font("Serif", Font.BOLD, 15));
                
        clear();


        try 
        {
          Connection connection = Db.getconnection();
         Statement stm=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
        ResultSet rs=stm.executeQuery("SELECT EmployeID as 'EmployeeID', first_name as 'First Name', last_name as 'Last Name', phone as 'Phone', email as 'Email', skills as 'Skills' FROM employee");
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        
        
            
            
            
                  
        } catch (SQLException ex) {
           
          JOptionPane.showMessageDialog(null,ex);
        }
       
       sizetoadjust();
    }
     
     public   void showAdminData(){
        test=0;
        jTable1.setDefaultEditor(Object.class, null);
        jTable1.setRowHeight(30);

        jTable1.setGridColor(Color.GRAY);
        jTable1.setFont(new Font("Serif", Font.BOLD, 15));
       
                
        clear();

        
             try 
        {
          Connection connection = AdminChangeDB.getconnection();
         Statement stm=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
        ResultSet rs=stm.executeQuery("SELECT username as 'User', modification as 'Action', reason as 'Information', datemodified as 'Date' FROM `change`");
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        
        
            
            
            
                  
        } catch (SQLException ex) {
           
          JOptionPane.showMessageDialog(null,ex);
        }
    sizetoadjust();
}
    public void jsearch(){
         test=1;
        try

        {

           

            Connection connection = Db.getconnection();

            Statement stm=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);

            if(skills.getText().isEmpty() && email.getText().isEmpty() && phonenumber.getText().isEmpty() && lname.getText().isEmpty() && fname.getText().isEmpty()&& id.getText().isEmpty()){

                //ResultSet rs=stm.executeQuery("SELECT EmployeID as 'EmployeeID', first_name as 'First Name', last_name as 'Last Name', phone as 'Phone', email as 'Email', skills as 'Skills' FROM employee");

                //jTable1.setModel(DbUtils.resultSetToTableModel(rs));
             showTableData();

            }else if(!skills.getText().isEmpty()&& email.getText().isEmpty() && phonenumber.getText().isEmpty() && lname.getText().isEmpty() && fname.getText().isEmpty()&& id.getText().isEmpty()){
           String userinput=skills.getText();
           int numberofwords=userinput.split(" ").length;
           String[] words=userinput.split(" ");
           String query="";
           switch(numberofwords){
               case 1: query="SELECT * from employee WHERE skills Like'%"+words[0]+" %'";
               break;
               case 2: query="SELECT * from employee WHERE skills LIKE'%"+words[0]+" %'"+"AND skills LIKE'%"+words[1]+" %'";
               break;
               case 3: query="SELECT * from employee WHERE skills LIKE'%"+words[0]+" %'"+"AND skills LIKE'%"+words[1]+" %'"+"AND skills LIKE'%"+words[2]+" %'";
               break;
               case 4: query="SELECT * from employee WHERE skills LIKE'%"+words[0]+" %'"+"AND skills LIKE'%"+words[1]+" %'"+"AND skills LIKE'%"+words[2]+" %'"+"AND skills LIKE'%"+words[3]+" %'";
               break;
               case 5: query="SELECT * from employee WHERE skills LIKE'%"+words[0]+" %'"+"AND skills LIKE'%"+words[1]+" %'"+"AND skills LIKE'%"+words[2]+" %'"+"AND skills LIKE'%"+words[3]+" %'"+"AND skills LIKE'%"+words[4]+" %'";
               break;
               default: query="SELECT * from employee WHERE skills Like'%"+words[0]+" %'";
               break;
               
               
           }
           if(numberofwords>5){
           JOptionPane.showMessageDialog(null,"You may only enter up to 5 skills to search. Each must be seperated by a space");
           clear();
           showTableData();

           }
           else{
           PreparedStatement ps = connection.prepareStatement(query);
          //ps.setString(1,String.valueOf(skills.getText()));
          ResultSet rs=ps.executeQuery();
          clear();
          jTable1.setModel(DbUtils.resultSetToTableModel(rs));
          removecolumn();
          sizetoadjust();
           }

          
          
                 
                
       


              

           
            }
            
  
            else if(!fname.getText().isEmpty()&&lname.getText().isEmpty()&& email.getText().isEmpty() && phonenumber.getText().isEmpty() && lname.getText().isEmpty() && skills.getText().isEmpty()&& id.getText().isEmpty()){

               PreparedStatement ps = connection.prepareStatement("SELECT * FROM employee WHERE first_name = ?");

                ps.setString(1, fname.getText());

               

                ResultSet rs=ps.executeQuery();

              //while(rs.next()){
                clear();
               jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                removecolumn();
                sizetoadjust();

           

              //}

            }
            
        else if(!lname.getText().isEmpty()&&fname.getText().isEmpty()&& email.getText().isEmpty() && phonenumber.getText().isEmpty() && skills.getText().isEmpty() && fname.getText().isEmpty()&& id.getText().isEmpty()){

               PreparedStatement ps = connection.prepareStatement("SELECT * FROM employee WHERE last_name = ?");

                ps.setString(1, lname.getText());

               

                ResultSet rs=ps.executeQuery();

              
               clear();
               jTable1.setModel(DbUtils.resultSetToTableModel(rs));
               removecolumn();
               sizetoadjust();
         

              

            }
        else if(!id.getText().isEmpty()&&lname.getText().isEmpty()&& email.getText().isEmpty() && phonenumber.getText().isEmpty() && skills.getText().isEmpty() && fname.getText().isEmpty()){

               PreparedStatement ps = connection.prepareStatement("SELECT * FROM employee WHERE EmployeId = ?");

                ps.setString(1, id.getText());

               

                ResultSet rs=ps.executeQuery();

              
               clear();
               jTable1.setModel(DbUtils.resultSetToTableModel(rs));
               removecolumn();
               sizetoadjust();
         

              

            }
        else{
            showTableData();
        }
           
        
                  

        } catch (SQLException ex) {

          

          JOptionPane.showMessageDialog(null,ex);

        }
    }

       
public void sizetoadjust(){
            jTable1.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );
 
for (int column = 1; column < jTable1.getColumnCount(); column++)
{
    TableColumn tableColumn = jTable1.getColumnModel().getColumn(column);
    int preferredWidth = 100;
    int maxWidth = tableColumn.getMaxWidth();
 
    for (int row = 0; row < jTable1.getRowCount(); row++)
    {
        TableCellRenderer cellRenderer = jTable1.getCellRenderer(row, column);
        Component c = jTable1.prepareRenderer(cellRenderer, row, column);
        int width = c.getPreferredSize().width + jTable1.getIntercellSpacing().width;
        preferredWidth = Math.max(preferredWidth, width);
 
        //  We've exceeded the maximum width, no need to check other rows
 
        if (preferredWidth >= maxWidth)
        {
            preferredWidth = maxWidth;
            break;
        }
    }
 
    tableColumn.setPreferredWidth( preferredWidth );
}
    
}
         
public void trackchange(String admin,String mod, String res, Object date){

        
    try {
        Connection connection = AdminChangeDB.getconnection();
 PreparedStatement stm=connection.prepareStatement("INSERT INTO `change`(`username`, `modification`, `reason`, `datemodified`)"+" VALUES (?,?,?,?)");

        
         stm.setString(1, admin);
         stm.setString(2, mod);
         stm.setString(3, res);
         stm.setObject(4, date);
         stm.execute();



    
}    catch (SQLException ex) {
         Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
     }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Update;
    private javax.swing.JButton adminB;
    private javax.swing.JTextField email;
    private javax.swing.JTextField fname;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jsearch;
    private javax.swing.JTextField lname;
    private javax.swing.JTextField phonenumber;
    private javax.swing.JButton search;
    private javax.swing.JTextField skills;
    // End of variables declaration//GEN-END:variables
}
